[tool.poetry]
name = "ebackend_autotests"
version = "0.1.0"
description = ""
authors = ["Denis Butylin"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.13"
pytest = "^8.0.1"
allure-pytest = "^2.13.2"
email-validator = "^2.2.0"
environs = "^10.3.0"
faker = "^23.2.1"
pydantic = "2.10.6"
PyMySQL = "^1.1.1"
python-box = "^7.1.1"
requests = "^2.31.0"
SQLAlchemy = "^2.0.39"

[tool.poetry.group.dev.dependencies]
add-trailing-comma = "^2.3.0"
bandit = { extras = ["toml"], version = "^1.7.4" }
black = "^24.2.0"
flake8 = "7.0.0"
flake8-annotations = "^3.0.1"
flake8-broken-line = "^1.0.0"
flake8-bugbear = "^23.9.16"
flake8-cognitive-complexity = "^0.1.0"
flake8-commas = "^2.1.0"
flake8-multiline-containers = "^0.0.19"
flake8-pyproject = "^1.2.3"
flake8-quotes = "^3.3.2"
flake8-use-pathlib = "^0.3.0"
isort = "^5.10.1"
mypy = "^1.5.1"
pylint = "^3.0.0"
types-requests = "^2.31.0.10"
autoflake = "^2.2.1"

[tool.pytest.ini_options]
addopts = "--showlocals -s -v --alluredir allure-results --clean-alluredir --log-cli-level=INFO"
norecursedirs = [".venv", "src"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120

[tool.isort]
# Профиль идет в соответствии с настройками Black
profile = "black"
# Учитывать регистр при сортировке импортов
case_sensitive = true
# Комбинировать wildcard импорты
combine_star = true
# Включать запятую после последнего элемнта в списках и словарях
include_trailing_comma = true
# Размер отступа
indent = 4
# Максимальная длина строки
line_length = 120
# Режим многострочного вывода
multi_line_output = 3
# Использовать скобки для многострочного импорта
use_parentheses = true

[tool.bandit]
# Список проверок, которые будут пропускаться:
# B101 - Использование вызова assert
# B311 - Устаревший модуль использования API стандартной библиотеки (например, cgi)
# B404 - Осуществление обратных вызовов небезопасным образом
# B405 - Использование subprocess
# B501 - Переполнение буфера с использованием форматирования строк
# B603 - Аривная главная версия
# B605 - Использование функции input, которая может быть небезопасной
# B314 - Выявление возможной конфигурации разрешений на доступ
# B113 - Оценка всех случаев os оберток на каждой линии
# B310 - Использование документации для динамической вставки шаблонов строк
# B608 - Переполнение буфера с использованием форматирования строк оценивается как различные схожие случаи
skips = ["B101", "B311", "B404", "B405", "B501", "B603", "B605", "B314", "B113", "B310", "B608"]
exclude_dirs = [".venv"]

[tool.mypy]
ignore_missing_imports = true
ignore_errors = false
python_version = 3.12

[tool.pylint.messages_control]
max-line-length = 120
disable = [
    # Предупреждение об использовании f-строк в логировании
    "logging-fstring-interpolation",
    # Предупреждение о дублированном коде
    "duplicate-code",
    # Предупреждение о TODO и FIXMEs
    "fixme",
    # Предупреждение о слишком большом количестве локальных переменных
    "too-many-locals",
    # Предупреждение о слишком малом количестве публичных методов в классе
    "too-few-public-methods"
]

[tool.flake8]
exclude = [".venv"]
max-line-length = 120
# Включает подсчет количества ошибок и предупреждений в выводе
count = true
# Игнорирование определенных предупреждений:
# ANN101 - Отсутствие аннотации типа для метода self
# ANN102 - Отсутствие аннотации типа для метода cls
# ANN002 - Отсутствие аннотации типа для метода (пропускаются, так как это относится к тестам)
# ANN003 - Отсутствие аннотации типа для аргументов функции
# ANN401 - Аннотация возврата типа Any
# CCE001 - Использование утверждений assertTrue/False вместо assert
# C812 - Отсутствие завершающей запятой
# ANN204 - Пропущенные проверки (например, S4423)
ignore = [
    "ANN101",
    "ANN102",
    "ANN002",
    "ANN003",
    "ANN401",
    "CCE001",
    "C812",
    "ANN204"
]

# Игнорирование ошибок и предупреждений в файлах, подходящих под шаблон (например, в файлах тестов)
per-file-ignores = "test_*.py: ANN201, ANN001"

# Указание декораторов, которые будут исключены из проверки
dispatch-decorators = ["fixture", "parametrize"]

# Использование двойных кавычек для строк в одном уровне (инлайн строк)
inline-quotes = "double"

log_level = "INFO"
log_date_format = "%Y-%m-%d %H:%M:%S"
log_format = "%(asctime)s,%(msecs)03d - %(levelname)s - %(name)s - %(message)s"

log_cli = false
log_file_level = "DEBUG"
log_file = "pytest.log"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
log_file_format = "%(asctime)s,%(msecs)03d - %(levelname)s - %(name)s - %(message)s"
